// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings for automata C++ library.
class AutomataLibCpp {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AutomataLibCpp(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AutomataLibCpp.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// ParseTree class Definition
  ffi.Pointer<ParseTree> ParseTree_create_instance(
    ffi.Pointer<ffi.Char> reg,
  ) {
    return _ParseTree_create_instance(
      reg,
    );
  }

  late final _ParseTree_create_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ParseTree> Function(
              ffi.Pointer<ffi.Char>)>>('ParseTree_create_instance');
  late final _ParseTree_create_instance = _ParseTree_create_instancePtr
      .asFunction<ffi.Pointer<ParseTree> Function(ffi.Pointer<ffi.Char>)>();

  void ParseTree_destroy_instance(
    ffi.Pointer<ParseTree> instance,
  ) {
    return _ParseTree_destroy_instance(
      instance,
    );
  }

  late final _ParseTree_destroy_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ParseTree>)>>(
          'ParseTree_destroy_instance');
  late final _ParseTree_destroy_instance = _ParseTree_destroy_instancePtr
      .asFunction<void Function(ffi.Pointer<ParseTree>)>();

  ffi.Pointer<ffi.Char> ParseTree_generateDotText(
    ffi.Pointer<ParseTree> instance,
  ) {
    return _ParseTree_generateDotText(
      instance,
    );
  }

  late final _ParseTree_generateDotTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ParseTree>)>>('ParseTree_generateDotText');
  late final _ParseTree_generateDotText = _ParseTree_generateDotTextPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ParseTree>)>();

  /// NFA class Definition
  ffi.Pointer<NFA> NFA_create_instance(
    ffi.Pointer<ffi.Char> reg,
  ) {
    return _NFA_create_instance(
      reg,
    );
  }

  late final _NFA_create_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<NFA> Function(ffi.Pointer<ffi.Char>)>>(
      'NFA_create_instance');
  late final _NFA_create_instance = _NFA_create_instancePtr.asFunction<
      ffi.Pointer<NFA> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<NFA> NFA_create_instance_from_NFA(
    ffi.Pointer<NFA> other,
  ) {
    return _NFA_create_instance_from_NFA(
      other,
    );
  }

  late final _NFA_create_instance_from_NFAPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NFA> Function(ffi.Pointer<NFA>)>>(
          'NFA_create_instance_from_NFA');
  late final _NFA_create_instance_from_NFA = _NFA_create_instance_from_NFAPtr
      .asFunction<ffi.Pointer<NFA> Function(ffi.Pointer<NFA>)>();

  ffi.Pointer<NFA> NFA_create_instance_from_DFA(
    ffi.Pointer<DFA> dfa,
    int removeDeadStates,
  ) {
    return _NFA_create_instance_from_DFA(
      dfa,
      removeDeadStates,
    );
  }

  late final _NFA_create_instance_from_DFAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NFA> Function(
              ffi.Pointer<DFA>, ffi.Int)>>('NFA_create_instance_from_DFA');
  late final _NFA_create_instance_from_DFA = _NFA_create_instance_from_DFAPtr
      .asFunction<ffi.Pointer<NFA> Function(ffi.Pointer<DFA>, int)>();

  void NFA_destroy_instance(
    ffi.Pointer<NFA> instance,
  ) {
    return _NFA_destroy_instance(
      instance,
    );
  }

  late final _NFA_destroy_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NFA>)>>(
          'NFA_destroy_instance');
  late final _NFA_destroy_instance =
      _NFA_destroy_instancePtr.asFunction<void Function(ffi.Pointer<NFA>)>();

  ffi.Pointer<ffi.Char> NFA_generateDotText(
    ffi.Pointer<NFA> instance,
  ) {
    return _NFA_generateDotText(
      instance,
    );
  }

  late final _NFA_generateDotTextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<NFA>)>>(
      'NFA_generateDotText');
  late final _NFA_generateDotText = _NFA_generateDotTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<NFA>)>();

  ffi.Pointer<NFA> NFA_unionNFA(
    ffi.Pointer<NFA> instance,
    ffi.Pointer<NFA> otherInstance,
  ) {
    return _NFA_unionNFA(
      instance,
      otherInstance,
    );
  }

  late final _NFA_unionNFAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NFA> Function(
              ffi.Pointer<NFA>, ffi.Pointer<NFA>)>>('NFA_unionNFA');
  late final _NFA_unionNFA = _NFA_unionNFAPtr.asFunction<
      ffi.Pointer<NFA> Function(ffi.Pointer<NFA>, ffi.Pointer<NFA>)>();

  ffi.Pointer<NFA> NFA_intersection(
    ffi.Pointer<NFA> instance,
    ffi.Pointer<NFA> otherInstance,
  ) {
    return _NFA_intersection(
      instance,
      otherInstance,
    );
  }

  late final _NFA_intersectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NFA> Function(
              ffi.Pointer<NFA>, ffi.Pointer<NFA>)>>('NFA_intersection');
  late final _NFA_intersection = _NFA_intersectionPtr.asFunction<
      ffi.Pointer<NFA> Function(ffi.Pointer<NFA>, ffi.Pointer<NFA>)>();

  ffi.Pointer<NFA> NFA_complement(
    ffi.Pointer<NFA> instance,
  ) {
    return _NFA_complement(
      instance,
    );
  }

  late final _NFA_complementPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NFA> Function(ffi.Pointer<NFA>)>>(
          'NFA_complement');
  late final _NFA_complement = _NFA_complementPtr.asFunction<
      ffi.Pointer<NFA> Function(ffi.Pointer<NFA>)>();

  ffi.Pointer<NFA> NFA_concat(
    ffi.Pointer<NFA> instance,
    ffi.Pointer<NFA> otherInstance,
  ) {
    return _NFA_concat(
      instance,
      otherInstance,
    );
  }

  late final _NFA_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NFA> Function(
              ffi.Pointer<NFA>, ffi.Pointer<NFA>)>>('NFA_concat');
  late final _NFA_concat = _NFA_concatPtr.asFunction<
      ffi.Pointer<NFA> Function(ffi.Pointer<NFA>, ffi.Pointer<NFA>)>();

  ffi.Pointer<NFA> NFA_reverseNFA(
    ffi.Pointer<NFA> instance,
  ) {
    return _NFA_reverseNFA(
      instance,
    );
  }

  late final _NFA_reverseNFAPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NFA> Function(ffi.Pointer<NFA>)>>(
          'NFA_reverseNFA');
  late final _NFA_reverseNFA = _NFA_reverseNFAPtr.asFunction<
      ffi.Pointer<NFA> Function(ffi.Pointer<NFA>)>();

  /// DFA class Definition
  ffi.Pointer<DFA> DFA_create_instance(
    ffi.Pointer<ffi.Char> reg,
  ) {
    return _DFA_create_instance(
      reg,
    );
  }

  late final _DFA_create_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<DFA> Function(ffi.Pointer<ffi.Char>)>>(
      'DFA_create_instance');
  late final _DFA_create_instance = _DFA_create_instancePtr.asFunction<
      ffi.Pointer<DFA> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<DFA> DFA_create_instance_from_data(
    ffi.Pointer<ffi.Char> symbols,
    int symbols_size,
    ffi.Pointer<ffi.Int> table,
    int table_size,
    ffi.Pointer<ffi.Int> final_states,
    int final_states_size,
  ) {
    return _DFA_create_instance_from_data(
      symbols,
      symbols_size,
      table,
      table_size,
      final_states,
      final_states_size,
    );
  }

  late final _DFA_create_instance_from_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DFA> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('DFA_create_instance_from_data');
  late final _DFA_create_instance_from_data =
      _DFA_create_instance_from_dataPtr.asFunction<
          ffi.Pointer<DFA> Function(ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Int>, int, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<DFA> DFA_create_instance_from_DFA(
    ffi.Pointer<DFA> other,
  ) {
    return _DFA_create_instance_from_DFA(
      other,
    );
  }

  late final _DFA_create_instance_from_DFAPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DFA> Function(ffi.Pointer<DFA>)>>(
          'DFA_create_instance_from_DFA');
  late final _DFA_create_instance_from_DFA = _DFA_create_instance_from_DFAPtr
      .asFunction<ffi.Pointer<DFA> Function(ffi.Pointer<DFA>)>();

  ffi.Pointer<DFA> DFA_create_instance_from_NFA(
    ffi.Pointer<NFA> nfa,
  ) {
    return _DFA_create_instance_from_NFA(
      nfa,
    );
  }

  late final _DFA_create_instance_from_NFAPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DFA> Function(ffi.Pointer<NFA>)>>(
          'DFA_create_instance_from_NFA');
  late final _DFA_create_instance_from_NFA = _DFA_create_instance_from_NFAPtr
      .asFunction<ffi.Pointer<DFA> Function(ffi.Pointer<NFA>)>();

  void DFA_destroy_instance(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_destroy_instance(
      instance,
    );
  }

  late final _DFA_destroy_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DFA>)>>(
          'DFA_destroy_instance');
  late final _DFA_destroy_instance =
      _DFA_destroy_instancePtr.asFunction<void Function(ffi.Pointer<DFA>)>();

  int DFA_getStateNgb(
    ffi.Pointer<DFA> instance,
    int ind,
    int sym,
  ) {
    return _DFA_getStateNgb(
      instance,
      ind,
      sym,
    );
  }

  late final _DFA_getStateNgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DFA>, ffi.Int, ffi.Char)>>('DFA_getStateNgb');
  late final _DFA_getStateNgb = _DFA_getStateNgbPtr.asFunction<
      int Function(ffi.Pointer<DFA>, int, int)>();

  ffi.Pointer<ffi.Char> DFA_getSymbols(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_getSymbols(
      instance,
    );
  }

  late final _DFA_getSymbolsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<DFA>)>>(
      'DFA_getSymbols');
  late final _DFA_getSymbols = _DFA_getSymbolsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DFA>)>();

  int DFA_isMinimal(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_isMinimal(
      instance,
    );
  }

  late final _DFA_isMinimalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DFA>)>>(
          'DFA_isMinimal');
  late final _DFA_isMinimal =
      _DFA_isMinimalPtr.asFunction<int Function(ffi.Pointer<DFA>)>();

  int DFA_isFinalState(
    ffi.Pointer<DFA> instance,
    int ind,
  ) {
    return _DFA_isFinalState(
      instance,
      ind,
    );
  }

  late final _DFA_isFinalStatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DFA>, ffi.Int)>>(
          'DFA_isFinalState');
  late final _DFA_isFinalState =
      _DFA_isFinalStatePtr.asFunction<int Function(ffi.Pointer<DFA>, int)>();

  int DFA_stateCount(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_stateCount(
      instance,
    );
  }

  late final _DFA_stateCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DFA>)>>(
          'DFA_stateCount');
  late final _DFA_stateCount =
      _DFA_stateCountPtr.asFunction<int Function(ffi.Pointer<DFA>)>();

  ffi.Pointer<ffi.Int> DFA_getDeadStates(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_getDeadStates(
      instance,
    );
  }

  late final _DFA_getDeadStatesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<DFA>)>>(
      'DFA_getDeadStates');
  late final _DFA_getDeadStates = _DFA_getDeadStatesPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(ffi.Pointer<DFA>)>();

  int DFA_test(
    ffi.Pointer<DFA> instance,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _DFA_test(
      instance,
      str,
    );
  }

  late final _DFA_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DFA>, ffi.Pointer<ffi.Char>)>>('DFA_test');
  late final _DFA_test = _DFA_testPtr.asFunction<
      int Function(ffi.Pointer<DFA>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> DFA_getDiffString(
    ffi.Pointer<DFA> instance,
    ffi.Pointer<DFA> other,
    int max_depth,
  ) {
    return _DFA_getDiffString(
      instance,
      other,
      max_depth,
    );
  }

  late final _DFA_getDiffStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DFA>, ffi.Pointer<DFA>,
              ffi.Int)>>('DFA_getDiffString');
  late final _DFA_getDiffString = _DFA_getDiffStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<DFA>, ffi.Pointer<DFA>, int)>();

  ffi.Pointer<DFA> DFA_minimalDFA(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_minimalDFA(
      instance,
    );
  }

  late final _DFA_minimalDFAPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DFA> Function(ffi.Pointer<DFA>)>>(
          'DFA_minimalDFA');
  late final _DFA_minimalDFA = _DFA_minimalDFAPtr.asFunction<
      ffi.Pointer<DFA> Function(ffi.Pointer<DFA>)>();

  ffi.Pointer<DFA> DFA_unionDFA(
    ffi.Pointer<DFA> instance,
    ffi.Pointer<DFA> other,
  ) {
    return _DFA_unionDFA(
      instance,
      other,
    );
  }

  late final _DFA_unionDFAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DFA> Function(
              ffi.Pointer<DFA>, ffi.Pointer<DFA>)>>('DFA_unionDFA');
  late final _DFA_unionDFA = _DFA_unionDFAPtr.asFunction<
      ffi.Pointer<DFA> Function(ffi.Pointer<DFA>, ffi.Pointer<DFA>)>();

  ffi.Pointer<DFA> DFA_intersection(
    ffi.Pointer<DFA> instance,
    ffi.Pointer<DFA> other,
  ) {
    return _DFA_intersection(
      instance,
      other,
    );
  }

  late final _DFA_intersectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DFA> Function(
              ffi.Pointer<DFA>, ffi.Pointer<DFA>)>>('DFA_intersection');
  late final _DFA_intersection = _DFA_intersectionPtr.asFunction<
      ffi.Pointer<DFA> Function(ffi.Pointer<DFA>, ffi.Pointer<DFA>)>();

  ffi.Pointer<DFA> DFA_complement(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_complement(
      instance,
    );
  }

  late final _DFA_complementPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DFA> Function(ffi.Pointer<DFA>)>>(
          'DFA_complement');
  late final _DFA_complement = _DFA_complementPtr.asFunction<
      ffi.Pointer<DFA> Function(ffi.Pointer<DFA>)>();

  ffi.Pointer<DFA> DFA_concat(
    ffi.Pointer<DFA> instance,
    ffi.Pointer<DFA> other,
  ) {
    return _DFA_concat(
      instance,
      other,
    );
  }

  late final _DFA_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DFA> Function(
              ffi.Pointer<DFA>, ffi.Pointer<DFA>)>>('DFA_concat');
  late final _DFA_concat = _DFA_concatPtr.asFunction<
      ffi.Pointer<DFA> Function(ffi.Pointer<DFA>, ffi.Pointer<DFA>)>();

  ffi.Pointer<DFA> DFA_reverse(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_reverse(
      instance,
    );
  }

  late final _DFA_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DFA> Function(ffi.Pointer<DFA>)>>(
          'DFA_reverse');
  late final _DFA_reverse =
      _DFA_reversePtr.asFunction<ffi.Pointer<DFA> Function(ffi.Pointer<DFA>)>();

  int DFA_equalsDFA(
    ffi.Pointer<DFA> instance,
    ffi.Pointer<DFA> other,
  ) {
    return _DFA_equalsDFA(
      instance,
      other,
    );
  }

  late final _DFA_equalsDFAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DFA>, ffi.Pointer<DFA>)>>('DFA_equalsDFA');
  late final _DFA_equalsDFA = _DFA_equalsDFAPtr.asFunction<
      int Function(ffi.Pointer<DFA>, ffi.Pointer<DFA>)>();

  ffi.Pointer<ffi.Char> DFA_generateDotText(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_generateDotText(
      instance,
    );
  }

  late final _DFA_generateDotTextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<DFA>)>>(
      'DFA_generateDotText');
  late final _DFA_generateDotText = _DFA_generateDotTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DFA>)>();

  ffi.Pointer<ffi.Char> DFA_getDFAText(
    ffi.Pointer<DFA> instance,
  ) {
    return _DFA_getDFAText(
      instance,
    );
  }

  late final _DFA_getDFATextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<DFA>)>>(
      'DFA_getDFAText');
  late final _DFA_getDFAText = _DFA_getDFATextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DFA>)>();
}

final class ParseTree extends ffi.Opaque {}

final class NFA extends ffi.Opaque {}

final class DFA extends ffi.Opaque {}
